{"version":3,"sources":["components/FeaturedImage.js","components/BreedSelect.js","components/ImageGrid.js","App.js","serviceWorker.js","index.js"],"names":["FeaturedImage","props","className","alt","src","imgSrc","height","BreedSelect","name","id","onChange","selectOnChange","defaultValue","value","ImageGrid","photos","slice","map","photo","index","key","onClick","onPress","App","state","selectedBreed","url","url2","bind","showImage","this","setState","axios","get","then","response","data","message","console","log","prevProps","prevState","snapshot","fetchData","document","getElementById","dogBreed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8b09ce84.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction FeaturedImage(props) {\n    return(\n        <div className=\"jumbotron\">\n            <img alt=\"\" className=\"rounded mx-auto d-block\" src={props.imgSrc} height=\"250\"/>\n        </div>\n    )\n};\nexport default FeaturedImage;","import React from \"react\";\n\nfunction BreedSelect(props) {\n    return(\n        <label>\n        Select Breed:\n            <select\n                name=\"Breeds\"\n                id=\"breedsSelect\"\n                onChange={props.selectOnChange}\n                defaultValue={\"none\"}>\n                <option value=\"husky/\">Husky</option>\n                <option value=\"retriever/golden/\">Golden Retriever</option>\n                <option value=\"terrier/american/\">American Terrier</option>\n            </select>\n      </label>\n    )\n};\n\n\nexport default BreedSelect;\n","import React from 'react';\n\n\nfunction ImageGrid (props) {\n    return(\n        <div className=\"jumbotron\">\n                {\n                    props.photos.slice(0,18).map((photo,index) => {\n                    return <img key={index} onClick={() => props.onPress(photo)}  alt=\"\" className=\"col-md-2 img-thumbnail imgPointer\" src={photo} />\n                })\n                }\n        </div>  \n        \n    )\n};\nexport default ImageGrid;","import React from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport FeaturedImage from './components/FeaturedImage';\nimport BreedSelect from './components/BreedSelect';\nimport ImageGrid from './components/ImageGrid';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedBreed: \"\",\n      imgSrc: [],\n      photos: [],\n      url: \"https://dog.ceo/api/breed/husky/images/random\",\n      url2: \"https://dog.ceo/api/breed/husky/images\"\n    };\n\n    this.selectOnChange = this.selectOnChange.bind(this);\n    this.showImage = this.showImage.bind(this);\n\n  }\n\n  showImage(photo)\n  {\n    this.setState({\n      imgSrc: photo\n    });\n  }\n\n  componentDidMount() {\n    axios\n      .get(this.state.url)\n      .then(response => {\n        return response.data.message;\n      })\n      .then(imgSrc => {\n        this.setState({\n          imgSrc\n        });\n        console.log(this.state.imgSrc);\n      });\n    \n    axios\n      .get(this.state.url2)\n      .then(response => {\n        return response.data.message;\n      })\n      .then(photos => {\n        this.setState({\n          photos\n        });\n        console.log(this.state.photos);\n      });\n  }\n\ncomponentDidUpdate(prevProps, prevState, snapshot)\n{\n  if (this.props.imgSrc !== prevProps.imgSrc) {\n    this.fetchData(this.props.imgSrc);\n  }\n}\n  selectOnChange() {\n    let selectedBreed = document.getElementById(\"breedsSelect\").value;\n    this.setState({\n      selectedBreed,\n      url: `https://dog.ceo/api/breed/${selectedBreed}images/random`\n    });\n\n    axios\n      .get(`https://dog.ceo/api/breed/${selectedBreed}images/random`)\n      .then(response => {\n        return response.data.message;\n      })\n      .then(imgSrc => {\n        this.setState({\n          imgSrc\n        });\n        console.log(this.state.imgSrc);\n      });\n\n    axios\n      .get(`https://dog.ceo/api/breed/${selectedBreed}images`)\n      .then(response => {\n        return response.data.message;\n      })\n      .then(photos => {\n        this.setState({\n          photos\n        });\n        console.log(this.state.photos);\n      });\n    }\n  \n  render() {\n    let dogBreed = \"Husky\";\n    if (this.state.selectedBreed === \"husky/\") {\n      dogBreed = \"Husky\";\n    } else if (this.state.selectedBreed === \"retriever/golden/\") {\n      dogBreed = \"Golden Retriever\";\n    } else if (this.state.selectedBreed === \"terrier/american/\") {\n      dogBreed = \"American Terrier\";\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"jumbotron\">\n            <h1 className=\"display-4\">{dogBreed} Dog Gallery</h1>\n            <h3 className=\"lead\">ITMD-565-schauhan3@hawk.iit.edu</h3>\n            <hr className=\"my-4\"></hr>\n            <BreedSelect selectOnChange={this.selectOnChange} />\n        </div>\n            <FeaturedImage imgSrc={this.state.imgSrc} dogBreed={dogBreed} />\n\n            <ImageGrid onPress={this.showImage} photos={this.state.photos} dogBreed={dogBreed} />\n        </div>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}